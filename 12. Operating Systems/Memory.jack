// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
	let ram = 0; // ram now represents the whole ram as ram starts at 0
	let freeList = 2048; // heap's base address
	let freeList[0] = 0; // since there's only one element in freeList during init, it points to 0
	let freeList[1] = 14334; // size of heap
	return;

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];

    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;

    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    /** reference: https://github.com/alexnhan/nand2tetris/blob/master/projects/12/Memory.jack */
    function int alloc(int size) { // first-fit search
	var Array dataAddr;
	var Array nextList;
	var Array prevList;
	var int listSize;

	let dataAddr = 0;

	if(size + 2 < freeList[1]){
		let dataAddr = freeList + 2;
		let freeList = freeList + size + 2; // moving the freeList down to the available location in heap
		/** freeList[0] remains unaffected */
		let freeList[1] = freeList[1] - (size + 2); // reduce the size by (size + 2)	

	}else { // the first segment is smaller than what is required
		let nextList = freeList[0];
		let prevList = freeList;
		let listSize = nextList[1];

		while(~(size + 2 < listSize) & ~(nextList = 0)){
			let prevList = nextList;
			let nextList = nextList[0];
			let listSize = nextList[1];
	
			if(size + 2 < listSize){
				let dataAddr = nextList + 2;
				let nextList = nextList + size + 2;
				let nextList[0] = 0;
				let nextList[1] = listSize - (size + 2);
				let freeList = nextList;
			}
		}
	
	}
	return dataAddr;	
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	do Memory.deAlloc();
	return;
    }    
}
